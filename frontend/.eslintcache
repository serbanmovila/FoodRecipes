[{"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\index.js":"1","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\App.js":"2","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Reducer.js":"3","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\AppNavigator\\AppNavigator.js":"4","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Dashboard.js":"5","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Auth\\AuthScreen.js":"6","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Helpers\\Constants.js":"7","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Helpers\\Modal\\Modal.js":"8","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Helpers\\Header\\Header.js":"9","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\IngredientsScreen.js":"10","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Auth\\Controllers\\AuthActions.js":"11","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\RecommendationsScreen.js":"12","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\RecipesScreen.js":"13","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Helpers\\Navigation\\Navigation.js":"14","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\CommonStyledComponents.js":"15","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\Ingredient.js":"16","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\TableHeader.js":"17","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\AddIngredientForm.js":"18","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\Recipe.js":"19"},{"size":514,"mtime":1613817514196,"results":"20","hashOfConfig":"21"},{"size":744,"mtime":1613686926497,"results":"22","hashOfConfig":"21"},{"size":332,"mtime":1613817514138,"results":"23","hashOfConfig":"21"},{"size":641,"mtime":1613817514148,"results":"24","hashOfConfig":"21"},{"size":1419,"mtime":1613686926547,"results":"25","hashOfConfig":"21"},{"size":11915,"mtime":1613817514157,"results":"26","hashOfConfig":"21"},{"size":66,"mtime":1612701552346,"results":"27","hashOfConfig":"21"},{"size":411,"mtime":1613817514132,"results":"28","hashOfConfig":"21"},{"size":2336,"mtime":1613686926504,"results":"29","hashOfConfig":"21"},{"size":3181,"mtime":1613817514189,"results":"30","hashOfConfig":"21"},{"size":957,"mtime":1613818112090,"results":"31","hashOfConfig":"21"},{"size":230,"mtime":1613686926713,"results":"32","hashOfConfig":"21"},{"size":3179,"mtime":1613686926582,"results":"33","hashOfConfig":"21"},{"size":4913,"mtime":1613814220638,"results":"34","hashOfConfig":"21"},{"size":1055,"mtime":1613686926540,"results":"35","hashOfConfig":"21"},{"size":1938,"mtime":1613686926547,"results":"36","hashOfConfig":"21"},{"size":768,"mtime":1613686926560,"results":"37","hashOfConfig":"21"},{"size":1636,"mtime":1613814220656,"results":"38","hashOfConfig":"21"},{"size":1618,"mtime":1613686926571,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"mdstc",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\index.js",[],["84","85"],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\App.js",["86"],"import './App.css'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\nimport AppNavigator from './Screens/AppNavigator/AppNavigator'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route path=\"/ingredients\">\r\n            <AppNavigator screen=\"ingredients\" />\r\n          </Route>\r\n          <Route path=\"/recipes\">\r\n            <AppNavigator screen=\"recipes\" />\r\n          </Route>\r\n          <Route path=\"/recommendations\">\r\n            <AppNavigator screen=\"recommendations\" />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <AppNavigator />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Reducer.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\AppNavigator\\AppNavigator.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Dashboard.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Auth\\AuthScreen.js",["87","88"],"import React from 'react'\r\nimport Header from './../../Helpers/Header/Header'\r\nimport styled from 'styled-components'\r\nimport bg from './../../assets/images/lp-bg.jpg'\r\nimport { constants as c } from './../../Helpers/Constants'\r\nimport { Kitchen, MenuBook, Fastfood } from '@material-ui/icons'\r\nimport { Button, TextField } from '@material-ui/core'\r\nimport Modal from './../../Helpers/Modal/Modal'\r\nimport { login, register } from './Controllers/AuthActions'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: relative;\r\n    background: url(${bg});\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n`\r\n\r\nconst InnerContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.5);\r\n    padding-top: ${c.navHeight}px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n`\r\n\r\nconst Content = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n\r\n    & > div:not(:first-child) {\r\n        border-left: 1px solid rgba(255, 255, 255, 0.7);\r\n    }\r\n`\r\n\r\nconst Box = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 33.3%;\r\n\r\n    h3 {\r\n        color: white;\r\n        font-family: 'Source Sans Pro', sans-serif;\r\n        font-weight: 500;\r\n        font-size: 1.6vw;\r\n        max-width: 250px;\r\n    }\r\n\r\n    svg {\r\n        color: white;\r\n        width: 50px;\r\n        height: auto;\r\n    }\r\n`\r\n\r\nconst Tabs = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    background: #eee;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.3);\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.3);\r\n`\r\n\r\nconst Tab = styled.div`\r\n    width: 50%;\r\n    cursor: pointer;\r\n    transition: background 0.2s ease-in-out;\r\n\r\n    p {\r\n        font-family: 'Source Sans Pro', sans-serif;\r\n        text-align: center;\r\n    }\r\n\r\n    &.selected,\r\n    &:hover {\r\n        background: rgba(0, 0, 0, 0.1);\r\n    }\r\n`\r\n\r\nconst Form = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px 40px;\r\n\r\n    & > div {\r\n        margin: 10px auto;\r\n    }\r\n`\r\n\r\nconst InnerModal = styled.div`\r\n    background: white;\r\n    border-radius: 4px;\r\n`\r\n\r\nclass AuthScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            modal: false,\r\n            formType: 'login',\r\n            password: '',\r\n            email: '',\r\n            confirmPassword: '',\r\n            validCPW: true,\r\n            validPW: true,\r\n            validMail: true,\r\n        }\r\n    }\r\n\r\n    close = () => {\r\n        this.setState({ modal: false })\r\n    }\r\n\r\n    open = (type) => {\r\n        this.setState({ modal: true, formType: type })\r\n    }\r\n\r\n    switchTab = () => {\r\n        this.setState({\r\n            formType: this.state.formType === 'login' ? 'signup' : 'login',\r\n        })\r\n    }\r\n\r\n    updateValue = (type, content) => {\r\n        this.setState({\r\n            validCPW: this.state.password === this.state.confirmPassword,\r\n            validPW: this.state.password === this.state.confirmPassword,\r\n        })\r\n        switch (type) {\r\n            case 'pw':\r\n                this.setState({\r\n                    password: content,\r\n                })\r\n                break\r\n            case 'cpw':\r\n                this.setState({\r\n                    confirmPassword: content,\r\n                })\r\n            case 'email':\r\n                this.setState({\r\n                    email: content,\r\n                })\r\n        }\r\n    }\r\n\r\n    signUp = () => {\r\n        if (this.state.validCPW && this.state.validPW && this.state.validMail) {\r\n            console.log(this.props)\r\n            this.props.register(this.state)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { close, open } = this\r\n        return (\r\n            <>\r\n                <Header openModal={open} />\r\n                <Container>\r\n                    <InnerContainer>\r\n                        <Modal close={close} open={this.state.modal}>\r\n                            <InnerModal>\r\n                                <Tabs>\r\n                                    <Tab\r\n                                        style={{\r\n                                            borderRight:\r\n                                                '1px solid rgba(0,0,0,0.3)',\r\n                                        }}\r\n                                        className={\r\n                                            this.state.formType === 'login'\r\n                                                ? 'selected'\r\n                                                : ''\r\n                                        }\r\n                                        onClick={this.switchTab}\r\n                                    >\r\n                                        <p>Log in</p>\r\n                                    </Tab>\r\n                                    <Tab\r\n                                        onClick={this.switchTab}\r\n                                        className={\r\n                                            this.state.formType === 'signup'\r\n                                                ? 'selected'\r\n                                                : ''\r\n                                        }\r\n                                    >\r\n                                        <p>Sign up</p>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                                <Form>\r\n                                    {this.state.formType === 'login' ? (\r\n                                        <>\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Email\"\r\n                                                variant=\"outlined\"\r\n                                            />\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Password\"\r\n                                                variant=\"outlined\"\r\n                                            />\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"large\"\r\n                                                style={{\r\n                                                    width: '100%',\r\n                                                    marginTop: '30px',\r\n                                                }}\r\n                                            >\r\n                                                Log in\r\n                                            </Button>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Email\"\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'email',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Password\"\r\n                                                variant=\"outlined\"\r\n                                                type=\"password\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'password',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Confirm password\"\r\n                                                variant=\"outlined\"\r\n                                                type=\"password\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'password',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"large\"\r\n                                                style={{\r\n                                                    width: '100%',\r\n                                                    marginTop: '30px',\r\n                                                }}\r\n                                                onClick={this.signUp}\r\n                                            >\r\n                                                Sign up\r\n                                            </Button>\r\n                                        </>\r\n                                    )}\r\n                                </Form>\r\n                            </InnerModal>\r\n                        </Modal>\r\n                        <ContentContainer>\r\n                            <Content>\r\n                                <Box>\r\n                                    <Kitchen />\r\n                                    <h3>Keep track of your ingredients</h3>\r\n                                </Box>\r\n                                <Box>\r\n                                    <MenuBook />\r\n                                    <h3>Keep track of your recipes</h3>\r\n                                </Box>\r\n                                <Box>\r\n                                    <Fastfood />\r\n                                    <h3>\r\n                                        Get recipe recommendations based on what\r\n                                        you like\r\n                                    </h3>\r\n                                </Box>\r\n                            </Content>\r\n                        </ContentContainer>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                color: 'black',\r\n                                marginTop: '7%',\r\n                            }}\r\n                            size=\"large\"\r\n                            onClick={() => {\r\n                                open('login')\r\n                            }}\r\n                        >\r\n                            Sign up\r\n                        </Button>\r\n                    </InnerContainer>\r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect((state) => ({}), { login, register })(AuthScreen)\r\n","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Helpers\\Constants.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Helpers\\Modal\\Modal.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Helpers\\Header\\Header.js",["89","90","91","92","93"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { constants as c } from '../Constants'\r\n\r\nconst Nav = styled.nav`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  position: fixed;\r\n  width: 100%;\r\n  left: 0;\r\n  height: ${c.navHeight}px;\r\n  top: 0;\r\n  z-index: 2;\r\n`\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n  flex-direction: row;\r\n`\r\n\r\nconst Element = styled.li`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    font-weight: 500;\r\n    height: 100%;\r\n    letter-spacing: 1px;\r\n    margin: 0 10px;\r\n    color: white;\r\n    position: relative;\r\n    opacity: 0.8;\r\n    font-family: 'Source Sans Pro', sans-serif;\r\n    transition: opacity 0.3s ease-in-out;\r\n\r\n    &::after {\r\n      content: '';\r\n      height: 2px;\r\n      background: white;\r\n      display: block;\r\n      width: 0;\r\n      position: absolute;\r\n      left: 0;\r\n      top: 120%;\r\n      transition: width 0.4s ease-in-out;\r\n    }\r\n\r\n    &:hover {\r\n      opacity: 1;\r\n      transition: opacity 0.3s ease-in-out;\r\n\r\n      &::after {\r\n        width: 100%;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst Logo = styled.h1`\r\n  font-family: 'Libre Baskerville', serif;\r\n  font-style: italic;\r\n  color: white;\r\n  letter-spacing: 2px;\r\n  opacity: 0.8;\r\n  cursor: pointer;\r\n  transition: opacity 0.3s ease-in-out;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst NavInner = styled.div`\r\n  width: 90%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n`\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <Nav>\r\n      <NavInner>\r\n        <Logo>FoodRecipes</Logo>\r\n        <List>\r\n          <Element>\r\n            <a\r\n              href=\"javascript:void(0)\"\r\n              onClick={() => {\r\n                props.openModal('login')\r\n              }}\r\n            >\r\n              Login\r\n            </a>\r\n          </Element>\r\n          <Element>\r\n            <a\r\n              href=\"javascript:void(0)\"\r\n              onClick={() => {\r\n                props.openModal('register')\r\n              }}\r\n            >\r\n              Register\r\n            </a>\r\n          </Element>\r\n        </List>\r\n      </NavInner>\r\n    </Nav>\r\n  )\r\n}\r\n","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\IngredientsScreen.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Auth\\Controllers\\AuthActions.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\RecommendationsScreen.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\RecipesScreen.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Helpers\\Navigation\\Navigation.js",["94"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Menu } from '@material-ui/icons'\r\nimport {Button, IconButton} from '@material-ui/core/'\r\nimport img1 from '../../assets/images/1.jpg'\r\nimport img2 from '../../assets/images/2.jpg'\r\nimport img3 from '../../assets/images/3.jpg'\r\nimport img4 from '../../assets/images/4.jpg'\r\nimport img5 from '../../assets/images/5.jpg'\r\nimport img6 from '../../assets/images/6.jpg'\r\nimport img7 from '../../assets/images/7.jpg'\r\n\r\nconst NavContainer = styled.div`\r\n  max-width: 300px;\r\n  min-width: 250px;\r\n  width: 20%;\r\n  height: 100vh;\r\n  align-items: center;\r\n  background: white;\r\n  -webkit-box-shadow: -3px -1px 6px 0px rgba(0, 0, 0, 0.75);\r\n  -moz-box-shadow: -3px -1px 6px 0px rgba(0, 0, 0, 0.75);\r\n  box-shadow: -3px -1px 6px 0px rgba(0, 0, 0, 0.75);\r\n  z-index: 3;\r\n  background-size: cover;\r\n  background-position: center;\r\n\r\n  @media (max-width: 600px) {\r\n    height: 100%;\r\n    position: fixed;\r\n    width: 250px;\r\n    top: 0;\r\n    transition: left 0.2s ease-in-out;\r\n  }\r\n`\r\n\r\nconst NavBgOverlay = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  background: rgb(55, 59, 96, 0.76);\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst Nav = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n\r\n  @media (max-width: 600px) {\r\n    height: 100%;\r\n    width: 250px;\r\n    top: 0;\r\n    left: -250px;\r\n    transition: left 0.2s ease-in-out;\r\n  }\r\n`\r\n\r\nconst List = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n\r\n  button {\r\n    border-radius: 0px;\r\n    padding: 4% 0;\r\n    color: rgba(255, 255, 255, 0.9);\r\n    text-transform: none;\r\n    letter-spacing: 1px;\r\n\r\n    span {\r\n      text-align: left;\r\n      padding-left: 10%;\r\n      display: flex;\r\n      justify-content: flex-start;\r\n    }\r\n\r\n    :not(:first-child) {\r\n      border-top: 1px solid rgba(0, 0, 0, 0.2);\r\n    }\r\n\r\n    &.active {\r\n      background: rgba(0, 0, 0, 0.3);\r\n    }\r\n  }\r\n`\r\n\r\nconst NavHeader = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n\r\n  @media (max-width: 600px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst MobileNavHeader = styled.div`\r\n  display: none;\r\n  \r\n  @media (max-width: 600px) {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 5px 20px;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    background-color: #efeff7;\r\n  }\r\n`\r\n\r\nconst Logo = styled.h1`\r\n  font-family: 'Libre Baskerville', serif;\r\n  font-style: italic;\r\n  color: white;\r\n  font-size: 130%;\r\n  letter-spacing: 2px;\r\n  cursor: pointer;\r\n  transition: opacity 0.3s ease-in-out;\r\n  margin-left: 10%;\r\n\r\n  @media (max-width: 600px) {\r\n    color: rgba(0,0,0,0.8);\r\n    margin: auto 0;\r\n  }\r\n`\r\n\r\nconst MenuBtn = styled.span`\r\n  cursor: pointer;\r\n`\r\n\r\nconst Mask = styled.div`\r\n  background-color: rgba(0,0,0,0.5);\r\n  position: fixed;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 2;\r\n`\r\n\r\nexport default class Navigation extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      mobileNavState: \"-250px\"\r\n    }\r\n  }\r\n\r\n  switchNav = () => {\r\n    if (this.state.mobileNavState === \"-250px\") {\r\n      this.setState({\r\n        mobileNavState: \"0px\"\r\n      })\r\n    }\r\n    else {\r\n      this.setState({\r\n        mobileNavState: \"-250px\"\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { screen } = this.props\r\n\r\n    let bg,\r\n      bgs = [img1, img2, img3, img4, img5, img6, img7]\r\n\r\n    bg = bgs[Math.floor(Math.random() * 7)]\r\n\r\n    return (\r\n      <>\r\n      {this.state.mobileNavState === \"0px\" && <Mask onClick={this.switchNav}/>}\r\n      <MobileNavHeader>\r\n        <Logo>FoodRecipes</Logo>\r\n        <IconButton onClick={this.switchNav}><Menu/></IconButton>\r\n      </MobileNavHeader>\r\n      <NavContainer\r\n        style={{\r\n          backgroundImage: `url(${bg})`,\r\n          left: this.state.mobileNavState\r\n        }}\r\n      >\r\n        <NavBgOverlay>\r\n          <NavHeader>\r\n            <Logo>FoodRecipes</Logo>\r\n          </NavHeader>\r\n          <Nav>\r\n            <List>\r\n              <Button\r\n                className={screen === 'ingredients' ? 'active' : ''}\r\n                onClick={() => this.props.switchScreen('ingredients')}\r\n              >\r\n                Ingredients\r\n              </Button>\r\n              <Button\r\n                className={screen === 'recipes' ? 'active' : ''}\r\n                onClick={() => this.props.switchScreen('recipes')}\r\n              >\r\n                Recipes\r\n              </Button>\r\n              <Button\r\n                className={screen === 'recommendations' ? 'active' : ''}\r\n                onClick={() => this.props.switchScreen('recommendations')}\r\n              >\r\n                Get recommendation\r\n              </Button>\r\n            </List>\r\n          </Nav>\r\n        </NavBgOverlay>\r\n      </NavContainer>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\CommonStyledComponents.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\Ingredient.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\TableHeader.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\AddIngredientForm.js",[],"D:\\work\\Projects\\SerbiL\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\Recipe.js",["95"],"import styled from 'styled-components'\r\nimport TimerIcon from '@material-ui/icons/Timer'\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer'\r\n\r\nconst Box = styled.div`\r\n  border-radius: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 31.3%;\r\n  margin: 1%;\r\n  background: white;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n`\r\n\r\nconst BoxHeader = styled.div`\r\n  background: rgb(55, 59, 96);\r\n  padding: 3% 4%;\r\n\r\n  p {\r\n    color: white;\r\n    font-size: 90%;\r\n    font-weight: 500;\r\n    text-align: left;\r\n    margin: 0;\r\n  }\r\n`\r\n\r\nconst BoxContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 8% 5%;\r\n`\r\n\r\nconst InfoSection = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  svg {\r\n    font-size: 200%;\r\n    color: rgba(55, 59, 96, 0.8);\r\n  }\r\n\r\n  .label {\r\n    font-weight: 700;\r\n    font-size: 70%;\r\n    margin-top: 5px;\r\n    color: rgba(0, 0, 0, 0.5);\r\n  }\r\n\r\n  .info {\r\n    font-size: 120%;\r\n    font-weight: 600;\r\n    margin: 0 auto;\r\n  }\r\n`\r\n\r\nexport default function Recipe(props) {\r\n  const { name, time, difficulty, price } = props.data\r\n\r\n  return (\r\n    <Box>\r\n      <BoxHeader>\r\n        <p>{name}</p>\r\n      </BoxHeader>\r\n      <BoxContent>\r\n        <InfoSection>\r\n          <TimerIcon />\r\n          <p className=\"label\">TIME TO COOK</p>\r\n          <p className=\"info\">{time}</p>\r\n        </InfoSection>\r\n        <InfoSection>\r\n          <LocalOfferIcon />\r\n          <p className=\"label\">APPROX. COST</p>\r\n          <p className=\"info\">{price} lei</p>\r\n        </InfoSection>\r\n      </BoxContent>\r\n    </Box>\r\n  )\r\n}\r\n",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":2,"column":50,"nodeType":"102","messageId":"103","endLine":2,"endColumn":54},{"ruleId":"104","severity":1,"message":"105","line":146,"column":9,"nodeType":"106","messageId":"107","endLine":160,"endColumn":10},{"ruleId":"108","severity":1,"message":"109","line":156,"column":13,"nodeType":"110","messageId":"111","endLine":159,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":3,"column":10,"nodeType":"102","messageId":"103","endLine":3,"endColumn":14},{"ruleId":"112","severity":1,"message":"113","line":93,"column":13,"nodeType":"114","endLine":98,"endColumn":14},{"ruleId":"115","severity":1,"message":"116","line":94,"column":20,"nodeType":"117","messageId":"118","endLine":94,"endColumn":40},{"ruleId":"112","severity":1,"message":"113","line":103,"column":13,"nodeType":"114","endLine":108,"endColumn":14},{"ruleId":"115","severity":1,"message":"116","line":104,"column":20,"nodeType":"117","messageId":"118","endLine":104,"endColumn":40},{"ruleId":"100","severity":1,"message":"119","line":129,"column":7,"nodeType":"102","messageId":"103","endLine":129,"endColumn":14},{"ruleId":"100","severity":1,"message":"120","line":60,"column":23,"nodeType":"102","messageId":"103","endLine":60,"endColumn":33},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'MenuBtn' is assigned a value but never used.","'difficulty' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]