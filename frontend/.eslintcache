[{"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\index.js":"1","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\App.js":"2","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\AppNavigator\\AppNavigator.js":"3","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Dashboard.js":"4","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Auth\\AuthScreen.js":"5","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\RecommendationsScreen.js":"6","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Constants.js":"7","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Navigation\\Navigation.js":"8","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\IngredientsScreen.js":"9","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\RecipesScreen.js":"10","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Header\\Header.js":"11","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\CommonStyledComponents.js":"12","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\Ingredient.js":"13","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\TableHeader.js":"14","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\Recipe.js":"15","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\AddIngredientForm.js":"16","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Modal\\Modal.js":"17","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Reducer.js":"18","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Controllers\\IngredientsActions.js":"19","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Auth\\Controllers\\AuthActions.js":"20","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\PickMeal.js":"21","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\PickRecipes.js":"22","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\AddRecipeForm.js":"23","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Controllers\\RecipeActions.js":"24"},{"size":929,"mtime":1613854909085,"results":"25","hashOfConfig":"26"},{"size":1194,"mtime":1613853709633,"results":"27","hashOfConfig":"26"},{"size":729,"mtime":1613821988127,"results":"28","hashOfConfig":"26"},{"size":1698,"mtime":1617393543162,"results":"29","hashOfConfig":"26"},{"size":13658,"mtime":1616510186497,"results":"30","hashOfConfig":"26"},{"size":1380,"mtime":1616862044758,"results":"31","hashOfConfig":"26"},{"size":66,"mtime":1613567049952,"results":"32","hashOfConfig":"26"},{"size":6711,"mtime":1617394035923,"results":"33","hashOfConfig":"26"},{"size":4480,"mtime":1617393719257,"results":"34","hashOfConfig":"26"},{"size":3678,"mtime":1617389682001,"results":"35","hashOfConfig":"26"},{"size":2848,"mtime":1617393370140,"results":"36","hashOfConfig":"26"},{"size":1407,"mtime":1617393585897,"results":"37","hashOfConfig":"26"},{"size":2416,"mtime":1617390032878,"results":"38","hashOfConfig":"26"},{"size":724,"mtime":1617389863099,"results":"39","hashOfConfig":"26"},{"size":2036,"mtime":1617393871366,"results":"40","hashOfConfig":"26"},{"size":3558,"mtime":1617391330999,"results":"41","hashOfConfig":"26"},{"size":411,"mtime":1613806568199,"results":"42","hashOfConfig":"26"},{"size":1124,"mtime":1616862007095,"results":"43","hashOfConfig":"26"},{"size":1391,"mtime":1617391137766,"results":"44","hashOfConfig":"26"},{"size":1341,"mtime":1616862015911,"results":"45","hashOfConfig":"26"},{"size":1554,"mtime":1613888689095,"results":"46","hashOfConfig":"26"},{"size":624,"mtime":1616861651529,"results":"47","hashOfConfig":"26"},{"size":12400,"mtime":1617394131491,"results":"48","hashOfConfig":"26"},{"size":1379,"mtime":1617389686680,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1cl64se",{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\index.js",[],["107","108"],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\App.js",["109","110","111"],"import './App.css'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\nimport AppNavigator from './Screens/AppNavigator/AppNavigator'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { checkLogin } from './Screens/Auth/Controllers/AuthActions'\r\n\r\nfunction App(props) {\r\n    useEffect(() => {\r\n        props.checkLogin()\r\n    }, [])\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Switch>\r\n                    <Route path=\"/ingredients\">\r\n                        <AppNavigator screen=\"ingredients\" />\r\n                    </Route>\r\n                    <Route path=\"/recipes\">\r\n                        <AppNavigator screen=\"recipes\" />\r\n                    </Route>\r\n                    <Route path=\"/recommendations\">\r\n                        <AppNavigator screen=\"recommendations\" />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <AppNavigator />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default connect((state) => ({ ...state }), { checkLogin })(App)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\AppNavigator\\AppNavigator.js",["112"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport AuthScreen from '../Auth/AuthScreen'\r\nimport Dashboard from './../Dashboard/Dashboard'\r\nimport { checkLogin } from './../Auth/Controllers/AuthActions'\r\n\r\nclass AppNavigator extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        const { screen, loggedIn } = this.props\r\n\r\n        if (loggedIn) {\r\n            return (\r\n                <Dashboard\r\n                    screen={screen === undefined ? 'ingredients' : screen}\r\n                />\r\n            )\r\n        } else return <AuthScreen />\r\n    }\r\n}\r\n\r\nexport default connect((state) => ({ ...state }), {})(AppNavigator)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Dashboard.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Auth\\AuthScreen.js",["113","114"],"import React from 'react'\r\nimport Header from './../../Helpers/Header/Header'\r\nimport styled from 'styled-components'\r\nimport bg from './../../assets/images/lp-bg.jpg'\r\nimport { constants as c } from './../../Helpers/Constants'\r\nimport { Kitchen, MenuBook, Fastfood } from '@material-ui/icons'\r\nimport { Button, TextField } from '@material-ui/core'\r\nimport Modal from './../../Helpers/Modal/Modal'\r\nimport { login, register } from './Controllers/AuthActions'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: relative;\r\n    background: url(${bg});\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n`\r\n\r\nconst InnerContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.5);\r\n    padding-top: ${c.navHeight}px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n`\r\n\r\nconst Content = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n\r\n    & > div:not(:first-child) {\r\n        border-left: 1px solid rgba(255, 255, 255, 0.7);\r\n    }\r\n`\r\n\r\nconst Box = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 33.3%;\r\n\r\n    h3 {\r\n        color: white;\r\n        font-family: 'Source Sans Pro', sans-serif;\r\n        font-weight: 500;\r\n        font-size: 1.6vw;\r\n        max-width: 250px;\r\n    }\r\n\r\n    svg {\r\n        color: white;\r\n        width: 50px;\r\n        height: auto;\r\n    }\r\n`\r\n\r\nconst Tabs = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    background: #eee;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.3);\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.3);\r\n`\r\n\r\nconst Tab = styled.div`\r\n    width: 50%;\r\n    cursor: pointer;\r\n    transition: background 0.2s ease-in-out;\r\n\r\n    p {\r\n        font-family: 'Source Sans Pro', sans-serif;\r\n        text-align: center;\r\n    }\r\n\r\n    &.selected,\r\n    &:hover {\r\n        background: rgba(0, 0, 0, 0.1);\r\n    }\r\n`\r\n\r\nconst Form = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px 40px;\r\n\r\n    & > div {\r\n        margin: 10px auto;\r\n    }\r\n`\r\n\r\nconst InnerModal = styled.div`\r\n    background: white;\r\n    border-radius: 4px;\r\n`\r\n\r\nclass AuthScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            modal: false,\r\n            formType: 'login',\r\n            password: '',\r\n            email: '',\r\n            confirmPassword: '',\r\n            validCPW: true,\r\n            validPW: true,\r\n            validMail: true\r\n        }\r\n    }\r\n\r\n    close = () => {\r\n        this.setState({ modal: false })\r\n    }\r\n\r\n    open = (type) => {\r\n        this.setState({ modal: true, formType: type })\r\n    }\r\n\r\n    switchTab = () => {\r\n        this.setState({\r\n            formType: this.state.formType === 'login' ? 'signup' : 'login'\r\n        })\r\n    }\r\n\r\n    validatePasswords = () => {\r\n        if (this.state.formType === 'signup') {\r\n            this.setState({\r\n                validCPW: this.state.password === this.state.confirmPassword,\r\n                validPW: this.state.password === this.state.confirmPassword\r\n            })\r\n        } else\r\n            this.setState({\r\n                validCPW: true,\r\n                validPW: true\r\n            })\r\n    }\r\n\r\n    updateValue = (type, content) => {\r\n        switch (type) {\r\n            case 'pw':\r\n                this.setState(\r\n                    {\r\n                        password: content\r\n                    },\r\n                    this.validatePasswords\r\n                )\r\n                break\r\n            case 'cpw':\r\n                this.setState(\r\n                    {\r\n                        confirmPassword: content\r\n                    },\r\n                    this.validatePasswords\r\n                )\r\n            case 'email':\r\n                this.setState({\r\n                    email: content\r\n                })\r\n        }\r\n    }\r\n\r\n    signUp = () => {\r\n        if (this.state.validCPW && this.state.validPW && this.state.validMail) {\r\n            this.props.register(\r\n                {\r\n                    username: this.state.email,\r\n                    password: this.state.password,\r\n                    email: this.state.email\r\n                },\r\n                this.props.login\r\n            )\r\n        }\r\n    }\r\n\r\n    signIn = () => {\r\n        console.log(this.state.validPW && this.state.validMail)\r\n        if (this.state.validPW && this.state.validMail) {\r\n            this.props.login({\r\n                username: this.state.email,\r\n                password: this.state.password\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { close, open } = this\r\n        return (\r\n            <>\r\n                <Header openModal={open} />\r\n                <Container>\r\n                    <InnerContainer>\r\n                        <Modal close={close} open={this.state.modal}>\r\n                            <InnerModal>\r\n                                <Tabs>\r\n                                    <Tab\r\n                                        style={{\r\n                                            borderRight:\r\n                                                '1px solid rgba(0,0,0,0.3)'\r\n                                        }}\r\n                                        className={\r\n                                            this.state.formType === 'login'\r\n                                                ? 'selected'\r\n                                                : ''\r\n                                        }\r\n                                        onClick={this.switchTab}\r\n                                    >\r\n                                        <p>Log in</p>\r\n                                    </Tab>\r\n                                    <Tab\r\n                                        onClick={this.switchTab}\r\n                                        className={\r\n                                            this.state.formType === 'signup'\r\n                                                ? 'selected'\r\n                                                : ''\r\n                                        }\r\n                                    >\r\n                                        <p>Sign up</p>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                                <Form>\r\n                                    {this.state.formType === 'login' ? (\r\n                                        <>\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Email\"\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'email',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Password\"\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'pw',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"large\"\r\n                                                onClick={this.signIn}\r\n                                                style={{\r\n                                                    width: '100%',\r\n                                                    marginTop: '30px'\r\n                                                }}\r\n                                            >\r\n                                                Log in\r\n                                            </Button>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Email\"\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'email',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Password\"\r\n                                                variant=\"outlined\"\r\n                                                type=\"password\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'pw',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Confirm password\"\r\n                                                variant=\"outlined\"\r\n                                                type=\"password\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'cpw',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"large\"\r\n                                                style={{\r\n                                                    width: '100%',\r\n                                                    marginTop: '30px'\r\n                                                }}\r\n                                                onClick={this.signUp}\r\n                                            >\r\n                                                Sign up\r\n                                            </Button>\r\n                                        </>\r\n                                    )}\r\n                                </Form>\r\n                            </InnerModal>\r\n                        </Modal>\r\n                        <ContentContainer>\r\n                            <Content>\r\n                                <Box>\r\n                                    <Kitchen />\r\n                                    <h3>Keep track of your ingredients</h3>\r\n                                </Box>\r\n                                <Box>\r\n                                    <MenuBook />\r\n                                    <h3>Keep track of your recipes</h3>\r\n                                </Box>\r\n                                <Box>\r\n                                    <Fastfood />\r\n                                    <h3>\r\n                                        Get recipe recommendations based on what\r\n                                        you like\r\n                                    </h3>\r\n                                </Box>\r\n                            </Content>\r\n                        </ContentContainer>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                color: 'black',\r\n                                marginTop: '7%'\r\n                            }}\r\n                            size=\"large\"\r\n                            onClick={() => {\r\n                                open('login')\r\n                            }}\r\n                        >\r\n                            Sign up\r\n                        </Button>\r\n                    </InnerContainer>\r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect((state) => ({ ...state }), { login, register })(\r\n    AuthScreen\r\n)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\RecommendationsScreen.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Constants.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Navigation\\Navigation.js",["115"],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\IngredientsScreen.js",["116"],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\RecipesScreen.js",["117","118"],"import React from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport { Container, Header, HeaderContent } from '../CommonStyledComponents'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport Recipe from './Components/Recipe'\r\nimport Modal from '../../../Helpers/Modal/Modal'\r\nimport AddRecipeForm from './Components/AddRecipeForm'\r\nimport { getRecipes } from './Controllers/RecipeActions'\r\nimport { FormatListNumberedRtlRounded, ThreeSixty } from '@material-ui/icons'\r\n\r\nconst RecipesListing = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    max-height: 80%;\r\n    width: 100%;\r\n    overflow: auto;\r\n    align-self: flex-end;\r\n    /* width */\r\n    &::-webkit-scrollbar {\r\n        width: 6px;\r\n    }\r\n\r\n    /* Track */\r\n    &::-webkit-scrollbar-track {\r\n        background: transparent;\r\n    }\r\n\r\n    /* Handle */\r\n    &::-webkit-scrollbar-thumb {\r\n        background: rgba(0, 0, 0, 0.3);\r\n        border-radius: 8px;\r\n    }\r\n\r\n    /* Handle on hover */\r\n    &::-webkit-scrollbar-thumb:hover {\r\n        background: rgba(0, 0, 0, 0.5);\r\n    }\r\n`\r\n\r\nclass RecipesScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            openModal: false,\r\n            recipeData: {},\r\n            preloaded: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getRecipes()\r\n    }\r\n\r\n    close = () => {\r\n        this.setState({\r\n            preloaded: false,\r\n            openModal: false\r\n        })\r\n    }\r\n\r\n    open = () => {\r\n        this.setState({\r\n            openModal: true\r\n        })\r\n    }\r\n\r\n    viewRecipe = (data) => {\r\n        console.log(data)\r\n        this.setState(\r\n            {\r\n                preloaded: true,\r\n                recipeData: data\r\n            },\r\n            () => {\r\n                this.setState({\r\n                    openModal: true\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const recipes = this.props.recipes\r\n        return (\r\n            <>\r\n                <Container>\r\n                    <Header>\r\n                        <HeaderContent>\r\n                            <h3>Recipes</h3>\r\n                            <p>\r\n                                View, add, edit and remove recipes of all kinds.\r\n                            </p>\r\n                        </HeaderContent>\r\n                        <Button endIcon={<AddCircleIcon />} onClick={this.open}>\r\n                            New Recipe\r\n                        </Button>\r\n                    </Header>\r\n                    <RecipesListing>\r\n                        {recipes.map((recipe) => {\r\n                            return (\r\n                                <Recipe\r\n                                    handleClick={() => {\r\n                                        this.viewRecipe(recipe)\r\n                                    }}\r\n                                    data={recipe}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </RecipesListing>\r\n                </Container>\r\n                <Modal close={this.close} open={this.state.openModal}>\r\n                    <AddRecipeForm\r\n                        close={this.close}\r\n                        preloaded={this.state.preloaded}\r\n                        data={this.state.recipeData}\r\n                    />\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        recipes: state.recipes\r\n    }),\r\n    { getRecipes }\r\n)(RecipesScreen)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Header\\Header.js",["119","120","121","122","123"],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\CommonStyledComponents.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\Ingredient.js",["124","125"],"import styled from 'styled-components'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline'\r\nimport { IconButton } from '@material-ui/core'\r\n\r\nconst Row = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    position: relative;\r\n\r\n    & > button {\r\n        height: 45px !important;\r\n        width: 45px !important;\r\n        align-self: center;\r\n\r\n        &.delete-btn {\r\n            .delete-full {\r\n                display: none;\r\n                color: #ff5353;\r\n            }\r\n\r\n            &:hover {\r\n                .delete {\r\n                    display: none;\r\n                }\r\n                .delete-full {\r\n                    display: block;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &::after {\r\n        content: '';\r\n        height: 100%;\r\n        max-height: 1px;\r\n        background: #efeff7;\r\n        display: block;\r\n        position: absolute;\r\n        bottom: 0;\r\n        width: 96%;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n    }\r\n`\r\n\r\nconst Cell = styled.div`\r\n    display: flex;\r\n    justify-content: start;\r\n    align-items: center;\r\n    text-align: left;\r\n    padding: 1.5% 2%;\r\n\r\n    &.ingredient-name {\r\n        width: 40%;\r\n        font-weight: 500;\r\n    }\r\n\r\n    &.ingredient-qty,\r\n    &.ingredient-unit,\r\n    &.ingredient-price {\r\n        width: 45%;\r\n        justify-content: center;\r\n    }\r\n`\r\n\r\nexport default function Ingredient(props) {\r\n    const { name, qty, unit, price, id } = props.data\r\n    return (\r\n        <Row>\r\n            <Cell className=\"ingredient-name\">{name}</Cell>\r\n            <Cell className=\"ingredient-qty\">{qty}</Cell>\r\n            <IconButton\r\n                aria-label=\"edit\"\r\n                className=\"edit-btn\"\r\n                onClick={() => {\r\n                    props.editIngredient(props.data)\r\n                }}\r\n            >\r\n                <EditIcon />\r\n            </IconButton>\r\n            <IconButton\r\n                aria-label=\"delete\"\r\n                className=\"delete-btn\"\r\n                onClick={() => {\r\n                    props.deleteIngredient(id)\r\n                }}\r\n            >\r\n                <DeleteIcon className=\"delete-full\" />\r\n                <DeleteOutlineIcon className=\"delete\" />\r\n            </IconButton>\r\n        </Row>\r\n    )\r\n}\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\TableHeader.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\Recipe.js",["126","127"],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\AddIngredientForm.js",["128","129","130","131","132"],"import React from 'react'\r\nimport {\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    FormControl,\r\n    TextField,\r\n    Button\r\n} from '@material-ui/core'\r\nimport {\r\n    addIngredient,\r\n    getIngredients,\r\n    updateIngredient\r\n} from '../Controllers/IngredientsActions'\r\nimport { connect } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nconst FormContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 300px;\r\n    min-width: 300px;\r\n    padding: 30px 20px;\r\n    background: white;\r\n    border-radius: 4px;\r\n`\r\n\r\nclass AddIngredientForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        if (props.preloaded) {\r\n            console.log(props.data)\r\n            this.state = {\r\n                unitType: '',\r\n                id: props.data.id,\r\n                name: props.data.name,\r\n                qty: props.data.qty\r\n            }\r\n        } else\r\n            this.state = {\r\n                unitType: '',\r\n                name: '',\r\n                qty: 0\r\n            }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            unitType: event.target.value\r\n        })\r\n    }\r\n\r\n    updateValue = (type, content) => {\r\n        switch (type) {\r\n            case 'name':\r\n                this.setState({\r\n                    name: content\r\n                })\r\n                break\r\n            case 'qty':\r\n                this.setState({\r\n                    qty: content\r\n                })\r\n        }\r\n    }\r\n\r\n    clearForm = () => {\r\n        this.setState({\r\n            name: '',\r\n            qty: ''\r\n        })\r\n        this.props.getIngredients()\r\n        this.props.close()\r\n    }\r\n\r\n    sendIngredient = () => {\r\n        this.props.addIngredient(\r\n            {\r\n                name: this.state.name,\r\n                qty: this.state.qty\r\n            },\r\n            this.clearForm\r\n        )\r\n    }\r\n\r\n    saveIngredient = () => {\r\n        this.props.updateIngredient(\r\n            this.state.id,\r\n            {\r\n                id: this.state.id,\r\n                name: this.state.name,\r\n                qty: this.state.qty\r\n            },\r\n            this.clearForm\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <FormContainer>\r\n                <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Name\"\r\n                    variant=\"outlined\"\r\n                    value={this.state.name}\r\n                    onChange={(e) => {\r\n                        this.updateValue('name', e.target.value)\r\n                    }}\r\n                />\r\n                <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Quantity\"\r\n                    variant=\"outlined\"\r\n                    value={this.state.qty}\r\n                    onChange={(e) => {\r\n                        this.updateValue('qty', e.target.value)\r\n                    }}\r\n                />\r\n                {!this.props.preloaded && (\r\n                    <Button variant=\"outlined\" onClick={this.sendIngredient}>\r\n                        Add Ingredient\r\n                    </Button>\r\n                )}\r\n                {this.props.preloaded && (\r\n                    <Button variant=\"outlined\" onClick={this.saveIngredient}>\r\n                        Save\r\n                    </Button>\r\n                )}\r\n            </FormContainer>\r\n        )\r\n    }\r\n}\r\nexport default connect((state) => ({ ...state }), {\r\n    addIngredient,\r\n    getIngredients,\r\n    updateIngredient\r\n})(AddIngredientForm)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Modal\\Modal.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Reducer.js",["133","134"],"import { CallToActionRounded } from '@material-ui/icons'\r\nimport { getIngredients } from './Screens/Dashboard/Ingredients/Controllers/IngredientsActions'\r\n\r\nconst INITIAL_STATE = {\r\n    loggedIn: false,\r\n    ingredients: [],\r\n    recipes: [],\r\n    username: ''\r\n}\r\n\r\nconst Reducer = function (state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n        case 'GET_INGREDIENTS':\r\n            return { ...state, ingredients: action.ingredients }\r\n        case 'GET_RECIPES':\r\n            return { ...state, recipes: action.payload }\r\n        case 'LOGGED_IN':\r\n            localStorage.setItem('token', action.token)\r\n            return {\r\n                ...state,\r\n                loggedIn: true,\r\n                jwt: action.token,\r\n                ingredients: [],\r\n                recipes: []\r\n            }\r\n        case 'IS_LOGGED':\r\n            return {\r\n                ...state,\r\n                loggedIn: true,\r\n                jwt: action.token,\r\n                ingredients: [],\r\n                recipes: []\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default Reducer\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Controllers\\IngredientsActions.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Auth\\Controllers\\AuthActions.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\PickMeal.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\PickRecipes.js",["135"],"import React from 'react'\r\nimport Recipe from '../../Recipes/Components/Recipe'\r\nimport { connect } from 'react-redux'\r\n\r\nclass PickRecipes extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            recipes: this.props.recipes\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.recipes.map((recipe) => {\r\n                    ;<Recipe data={recipe} />\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        recipes: state.recipes\r\n    }),\r\n    {}\r\n)(PickRecipes)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\AddRecipeForm.js",["136","137"],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Controllers\\RecipeActions.js",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":2,"column":50,"nodeType":"144","messageId":"145","endLine":2,"endColumn":54},{"ruleId":"142","severity":1,"message":"146","line":4,"column":17,"nodeType":"144","messageId":"145","endLine":4,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":11,"column":8,"nodeType":"149","endLine":11,"endColumn":10,"suggestions":"150"},{"ruleId":"142","severity":1,"message":"151","line":5,"column":10,"nodeType":"144","messageId":"145","endLine":5,"endColumn":20},{"ruleId":"152","severity":1,"message":"153","line":155,"column":9,"nodeType":"154","messageId":"155","endLine":175,"endColumn":10},{"ruleId":"156","severity":1,"message":"157","line":171,"column":13,"nodeType":"158","messageId":"159","endLine":174,"endColumn":19},{"ruleId":"142","severity":1,"message":"160","line":130,"column":7,"nodeType":"144","messageId":"145","endLine":130,"endColumn":14},{"ruleId":"142","severity":1,"message":"161","line":14,"column":5,"nodeType":"144","messageId":"145","endLine":14,"endColumn":21},{"ruleId":"142","severity":1,"message":"162","line":11,"column":10,"nodeType":"144","messageId":"145","endLine":11,"endColumn":38},{"ruleId":"142","severity":1,"message":"163","line":11,"column":40,"nodeType":"144","messageId":"145","endLine":11,"endColumn":50},{"ruleId":"142","severity":1,"message":"143","line":3,"column":10,"nodeType":"144","messageId":"145","endLine":3,"endColumn":14},{"ruleId":"164","severity":1,"message":"165","line":93,"column":25,"nodeType":"166","endLine":98,"endColumn":26},{"ruleId":"167","severity":1,"message":"168","line":94,"column":34,"nodeType":"169","messageId":"170","endLine":94,"endColumn":54},{"ruleId":"164","severity":1,"message":"165","line":103,"column":25,"nodeType":"166","endLine":108,"endColumn":26},{"ruleId":"167","severity":1,"message":"168","line":104,"column":34,"nodeType":"169","messageId":"170","endLine":104,"endColumn":54},{"ruleId":"142","severity":1,"message":"171","line":70,"column":24,"nodeType":"144","messageId":"145","endLine":70,"endColumn":28},{"ruleId":"142","severity":1,"message":"172","line":70,"column":30,"nodeType":"144","messageId":"145","endLine":70,"endColumn":35},{"ruleId":"142","severity":1,"message":"173","line":65,"column":25,"nodeType":"144","messageId":"145","endLine":65,"endColumn":35},{"ruleId":"142","severity":1,"message":"174","line":66,"column":13,"nodeType":"144","messageId":"145","endLine":66,"endColumn":24},{"ruleId":"142","severity":1,"message":"175","line":3,"column":5,"nodeType":"144","messageId":"145","endLine":3,"endColumn":15},{"ruleId":"142","severity":1,"message":"176","line":4,"column":5,"nodeType":"144","messageId":"145","endLine":4,"endColumn":11},{"ruleId":"142","severity":1,"message":"177","line":5,"column":5,"nodeType":"144","messageId":"145","endLine":5,"endColumn":13},{"ruleId":"142","severity":1,"message":"178","line":6,"column":5,"nodeType":"144","messageId":"145","endLine":6,"endColumn":16},{"ruleId":"152","severity":1,"message":"153","line":54,"column":9,"nodeType":"154","messageId":"155","endLine":64,"endColumn":10},{"ruleId":"142","severity":1,"message":"179","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":29},{"ruleId":"142","severity":1,"message":"180","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":24},{"ruleId":"181","severity":1,"message":"182","line":17,"column":50,"nodeType":"183","messageId":"184","endLine":17,"endColumn":52},{"ruleId":"181","severity":1,"message":"182","line":68,"column":42,"nodeType":"183","messageId":"184","endLine":68,"endColumn":44},{"ruleId":"152","severity":1,"message":"153","line":95,"column":9,"nodeType":"154","messageId":"155","endLine":116,"endColumn":10},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["187"],"'checkLogin' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'MenuBtn' is assigned a value but never used.","'updateIngredient' is defined but never used.","'FormatListNumberedRtlRounded' is defined but never used.","'ThreeSixty' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'unit' is assigned a value but never used.","'price' is assigned a value but never used.","'difficulty' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'CallToActionRounded' is defined but never used.","'getIngredients' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},"Update the dependencies array to be: [props]",{"range":"190","text":"191"},[408,410],"[props]"]