[{"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\index.js":"1","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\App.js":"2","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\AppNavigator\\AppNavigator.js":"3","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Dashboard.js":"4","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Auth\\AuthScreen.js":"5","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\RecommendationsScreen.js":"6","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Constants.js":"7","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Navigation\\Navigation.js":"8","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\IngredientsScreen.js":"9","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\RecipesScreen.js":"10","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Header\\Header.js":"11","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\CommonStyledComponents.js":"12","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\Ingredient.js":"13","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\TableHeader.js":"14","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\Recipe.js":"15","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\AddIngredientForm.js":"16","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Modal\\Modal.js":"17","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Reducer.js":"18","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Controllers\\IngredientsActions.js":"19","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Auth\\Controllers\\AuthActions.js":"20","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\PickMeal.js":"21","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\PickRecipes.js":"22","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\AddRecipeForm.js":"23","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Controllers\\RecipeActions.js":"24","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\ScoreRecipes.js":"25"},{"size":929,"mtime":1619553719301,"results":"26","hashOfConfig":"27"},{"size":1194,"mtime":1619553719260,"results":"28","hashOfConfig":"27"},{"size":729,"mtime":1619553719263,"results":"29","hashOfConfig":"27"},{"size":1635,"mtime":1619556695399,"results":"30","hashOfConfig":"27"},{"size":13593,"mtime":1619556732724,"results":"31","hashOfConfig":"27"},{"size":3394,"mtime":1621695213548,"results":"32","hashOfConfig":"27"},{"size":66,"mtime":1619553719260,"results":"33","hashOfConfig":"27"},{"size":6711,"mtime":1619553719262,"results":"34","hashOfConfig":"27"},{"size":4480,"mtime":1619553719268,"results":"35","hashOfConfig":"27"},{"size":3651,"mtime":1619556752915,"results":"36","hashOfConfig":"27"},{"size":2848,"mtime":1619553719261,"results":"37","hashOfConfig":"27"},{"size":1407,"mtime":1619553719265,"results":"38","hashOfConfig":"27"},{"size":2416,"mtime":1619553719267,"results":"39","hashOfConfig":"27"},{"size":724,"mtime":1619553719267,"results":"40","hashOfConfig":"27"},{"size":2200,"mtime":1619558334550,"results":"41","hashOfConfig":"27"},{"size":3521,"mtime":1619556673678,"results":"42","hashOfConfig":"27"},{"size":411,"mtime":1619553719261,"results":"43","hashOfConfig":"27"},{"size":1124,"mtime":1619553719262,"results":"44","hashOfConfig":"27"},{"size":1299,"mtime":1621693420144,"results":"45","hashOfConfig":"27"},{"size":1287,"mtime":1621693420986,"results":"46","hashOfConfig":"27"},{"size":1558,"mtime":1619554860715,"results":"47","hashOfConfig":"27"},{"size":2177,"mtime":1619557595415,"results":"48","hashOfConfig":"27"},{"size":12561,"mtime":1621697342501,"results":"49","hashOfConfig":"27"},{"size":1229,"mtime":1621693420999,"results":"50","hashOfConfig":"27"},{"size":1735,"mtime":1619558623958,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1cl64se",{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\index.js",[],["115","116"],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\App.js",["117","118","119"],"import './App.css'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\nimport AppNavigator from './Screens/AppNavigator/AppNavigator'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { checkLogin } from './Screens/Auth/Controllers/AuthActions'\r\n\r\nfunction App(props) {\r\n    useEffect(() => {\r\n        props.checkLogin()\r\n    }, [])\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Switch>\r\n                    <Route path=\"/ingredients\">\r\n                        <AppNavigator screen=\"ingredients\" />\r\n                    </Route>\r\n                    <Route path=\"/recipes\">\r\n                        <AppNavigator screen=\"recipes\" />\r\n                    </Route>\r\n                    <Route path=\"/recommendations\">\r\n                        <AppNavigator screen=\"recommendations\" />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <AppNavigator />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default connect((state) => ({ ...state }), { checkLogin })(App)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\AppNavigator\\AppNavigator.js",["120"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport AuthScreen from '../Auth/AuthScreen'\r\nimport Dashboard from './../Dashboard/Dashboard'\r\nimport { checkLogin } from './../Auth/Controllers/AuthActions'\r\n\r\nclass AppNavigator extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        const { screen, loggedIn } = this.props\r\n\r\n        if (loggedIn) {\r\n            return (\r\n                <Dashboard\r\n                    screen={screen === undefined ? 'ingredients' : screen}\r\n                />\r\n            )\r\n        } else return <AuthScreen />\r\n    }\r\n}\r\n\r\nexport default connect((state) => ({ ...state }), {})(AppNavigator)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Dashboard.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Auth\\AuthScreen.js",["121","122"],"import React from 'react'\r\nimport Header from './../../Helpers/Header/Header'\r\nimport styled from 'styled-components'\r\nimport bg from './../../assets/images/lp-bg.jpg'\r\nimport { constants as c } from './../../Helpers/Constants'\r\nimport { Kitchen, MenuBook, Fastfood } from '@material-ui/icons'\r\nimport { Button, TextField } from '@material-ui/core'\r\nimport Modal from './../../Helpers/Modal/Modal'\r\nimport { login, register } from './Controllers/AuthActions'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: relative;\r\n    background: url(${bg});\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n`\r\n\r\nconst InnerContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.5);\r\n    padding-top: ${c.navHeight}px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n`\r\n\r\nconst Content = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n\r\n    & > div:not(:first-child) {\r\n        border-left: 1px solid rgba(255, 255, 255, 0.7);\r\n    }\r\n`\r\n\r\nconst Box = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 33.3%;\r\n\r\n    h3 {\r\n        color: white;\r\n        font-family: 'Source Sans Pro', sans-serif;\r\n        font-weight: 500;\r\n        font-size: 1.6vw;\r\n        max-width: 250px;\r\n    }\r\n\r\n    svg {\r\n        color: white;\r\n        width: 50px;\r\n        height: auto;\r\n    }\r\n`\r\n\r\nconst Tabs = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    background: #eee;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.3);\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.3);\r\n`\r\n\r\nconst Tab = styled.div`\r\n    width: 50%;\r\n    cursor: pointer;\r\n    transition: background 0.2s ease-in-out;\r\n\r\n    p {\r\n        font-family: 'Source Sans Pro', sans-serif;\r\n        text-align: center;\r\n    }\r\n\r\n    &.selected,\r\n    &:hover {\r\n        background: rgba(0, 0, 0, 0.1);\r\n    }\r\n`\r\n\r\nconst Form = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px 40px;\r\n\r\n    & > div {\r\n        margin: 10px auto;\r\n    }\r\n`\r\n\r\nconst InnerModal = styled.div`\r\n    background: white;\r\n    border-radius: 4px;\r\n`\r\n\r\nclass AuthScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            modal: false,\r\n            formType: 'login',\r\n            password: '',\r\n            email: '',\r\n            confirmPassword: '',\r\n            validCPW: true,\r\n            validPW: true,\r\n            validMail: true\r\n        }\r\n    }\r\n\r\n    close = () => {\r\n        this.setState({ modal: false })\r\n    }\r\n\r\n    open = (type) => {\r\n        this.setState({ modal: true, formType: type })\r\n    }\r\n\r\n    switchTab = () => {\r\n        this.setState({\r\n            formType: this.state.formType === 'login' ? 'signup' : 'login'\r\n        })\r\n    }\r\n\r\n    validatePasswords = () => {\r\n        if (this.state.formType === 'signup') {\r\n            this.setState({\r\n                validCPW: this.state.password === this.state.confirmPassword,\r\n                validPW: this.state.password === this.state.confirmPassword\r\n            })\r\n        } else\r\n            this.setState({\r\n                validCPW: true,\r\n                validPW: true\r\n            })\r\n    }\r\n\r\n    updateValue = (type, content) => {\r\n        switch (type) {\r\n            case 'pw':\r\n                this.setState(\r\n                    {\r\n                        password: content\r\n                    },\r\n                    this.validatePasswords\r\n                )\r\n                break\r\n            case 'cpw':\r\n                this.setState(\r\n                    {\r\n                        confirmPassword: content\r\n                    },\r\n                    this.validatePasswords\r\n                )\r\n            case 'email':\r\n                this.setState({\r\n                    email: content\r\n                })\r\n        }\r\n    }\r\n\r\n    signUp = () => {\r\n        if (this.state.validCPW && this.state.validPW && this.state.validMail) {\r\n            this.props.register(\r\n                {\r\n                    username: this.state.email,\r\n                    password: this.state.password,\r\n                    email: this.state.email\r\n                },\r\n                this.props.login\r\n            )\r\n        }\r\n    }\r\n\r\n    signIn = () => {\r\n        if (this.state.validPW && this.state.validMail) {\r\n            this.props.login({\r\n                username: this.state.email,\r\n                password: this.state.password\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { close, open } = this\r\n        return (\r\n            <>\r\n                <Header openModal={open} />\r\n                <Container>\r\n                    <InnerContainer>\r\n                        <Modal close={close} open={this.state.modal}>\r\n                            <InnerModal>\r\n                                <Tabs>\r\n                                    <Tab\r\n                                        style={{\r\n                                            borderRight:\r\n                                                '1px solid rgba(0,0,0,0.3)'\r\n                                        }}\r\n                                        className={\r\n                                            this.state.formType === 'login'\r\n                                                ? 'selected'\r\n                                                : ''\r\n                                        }\r\n                                        onClick={this.switchTab}\r\n                                    >\r\n                                        <p>Log in</p>\r\n                                    </Tab>\r\n                                    <Tab\r\n                                        onClick={this.switchTab}\r\n                                        className={\r\n                                            this.state.formType === 'signup'\r\n                                                ? 'selected'\r\n                                                : ''\r\n                                        }\r\n                                    >\r\n                                        <p>Sign up</p>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                                <Form>\r\n                                    {this.state.formType === 'login' ? (\r\n                                        <>\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Email\"\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'email',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Password\"\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'pw',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"large\"\r\n                                                onClick={this.signIn}\r\n                                                style={{\r\n                                                    width: '100%',\r\n                                                    marginTop: '30px'\r\n                                                }}\r\n                                            >\r\n                                                Log in\r\n                                            </Button>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Email\"\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'email',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Password\"\r\n                                                variant=\"outlined\"\r\n                                                type=\"password\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'pw',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <TextField\r\n                                                id=\"outlined-basic\"\r\n                                                label=\"Confirm password\"\r\n                                                variant=\"outlined\"\r\n                                                type=\"password\"\r\n                                                onChange={(e) => {\r\n                                                    this.updateValue(\r\n                                                        'cpw',\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }}\r\n                                            />\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                size=\"large\"\r\n                                                style={{\r\n                                                    width: '100%',\r\n                                                    marginTop: '30px'\r\n                                                }}\r\n                                                onClick={this.signUp}\r\n                                            >\r\n                                                Sign up\r\n                                            </Button>\r\n                                        </>\r\n                                    )}\r\n                                </Form>\r\n                            </InnerModal>\r\n                        </Modal>\r\n                        <ContentContainer>\r\n                            <Content>\r\n                                <Box>\r\n                                    <Kitchen />\r\n                                    <h3>Keep track of your ingredients</h3>\r\n                                </Box>\r\n                                <Box>\r\n                                    <MenuBook />\r\n                                    <h3>Keep track of your recipes</h3>\r\n                                </Box>\r\n                                <Box>\r\n                                    <Fastfood />\r\n                                    <h3>\r\n                                        Get recipe recommendations based on what\r\n                                        you like\r\n                                    </h3>\r\n                                </Box>\r\n                            </Content>\r\n                        </ContentContainer>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                color: 'black',\r\n                                marginTop: '7%'\r\n                            }}\r\n                            size=\"large\"\r\n                            onClick={() => {\r\n                                open('login')\r\n                            }}\r\n                        >\r\n                            Sign up\r\n                        </Button>\r\n                    </InnerContainer>\r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect((state) => ({ ...state }), { login, register })(\r\n    AuthScreen\r\n)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\RecommendationsScreen.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Constants.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Navigation\\Navigation.js",["123"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { Button, IconButton } from '@material-ui/core/'\r\nimport img1 from '../../assets/images/1.jpg'\r\nimport img2 from '../../assets/images/2.jpg'\r\nimport img3 from '../../assets/images/3.jpg'\r\nimport img4 from '../../assets/images/4.jpg'\r\nimport img5 from '../../assets/images/5.jpg'\r\nimport img6 from '../../assets/images/6.jpg'\r\nimport img7 from '../../assets/images/7.jpg'\r\n\r\nconst NavContainer = styled.div`\r\n    max-width: 300px;\r\n    min-width: 250px;\r\n    width: 20%;\r\n    height: 100vh;\r\n    align-items: center;\r\n    background: white;\r\n    -webkit-box-shadow: -3px -1px 6px 0px rgba(0, 0, 0, 0.75);\r\n    -moz-box-shadow: -3px -1px 6px 0px rgba(0, 0, 0, 0.75);\r\n    box-shadow: -3px -1px 6px 0px rgba(0, 0, 0, 0.75);\r\n    z-index: 3;\r\n    background-size: cover;\r\n    background-position: center;\r\n\r\n    @media (max-width: 600px) {\r\n        height: 100%;\r\n        position: fixed;\r\n        width: 250px;\r\n        top: 0;\r\n        transition: left 0.2s ease-in-out;\r\n    }\r\n`\r\n\r\nconst NavBgOverlay = styled.div`\r\n    height: 100%;\r\n    width: 100%;\r\n    background: rgb(55, 59, 96, 0.76);\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst Nav = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    @media (max-width: 600px) {\r\n        height: 100%;\r\n        width: 250px;\r\n        top: 0;\r\n        left: -250px;\r\n        transition: left 0.2s ease-in-out;\r\n    }\r\n`\r\n\r\nconst List = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    button {\r\n        border-radius: 0px;\r\n        padding: 4% 0;\r\n        color: rgba(255, 255, 255, 0.9);\r\n        text-transform: none;\r\n        letter-spacing: 1px;\r\n\r\n        span {\r\n            text-align: left;\r\n            padding-left: 10%;\r\n            display: flex;\r\n            justify-content: flex-start;\r\n        }\r\n\r\n        :not(:first-child) {\r\n            border-top: 1px solid rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        &.active {\r\n            background: rgba(0, 0, 0, 0.3);\r\n        }\r\n    }\r\n`\r\n\r\nconst NavHeader = styled.div`\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n\r\n    @media (max-width: 600px) {\r\n        display: none;\r\n    }\r\n`\r\n\r\nconst MobileNavHeader = styled.div`\r\n    display: none;\r\n\r\n    @media (max-width: 600px) {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 5px 20px;\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100vw;\r\n        background-color: #efeff7;\r\n        box-shadow: 0 0 0 0.4px rgb(55, 59, 96);\r\n    }\r\n`\r\n\r\nconst Logo = styled.h1`\r\n    font-family: 'Libre Baskerville', serif;\r\n    font-style: italic;\r\n    color: white;\r\n    font-size: 130%;\r\n    letter-spacing: 2px;\r\n    cursor: pointer;\r\n    transition: opacity 0.3s ease-in-out;\r\n    margin-left: 10%;\r\n\r\n    @media (max-width: 600px) {\r\n        color: rgba(0, 0, 0, 0.8);\r\n        margin: auto 0;\r\n    }\r\n`\r\n\r\nconst MenuBtn = styled.span`\r\n    cursor: pointer;\r\n`\r\n\r\nconst Mask = styled.div`\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    position: fixed;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    z-index: 2;\r\n`\r\n\r\nexport default class Navigation extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            mobileNavState: '-250px'\r\n        }\r\n    }\r\n\r\n    switchNav = () => {\r\n        if (this.state.mobileNavState === '-250px') {\r\n            this.setState({\r\n                mobileNavState: '0px'\r\n            })\r\n        } else {\r\n            this.setState({\r\n                mobileNavState: '-250px'\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { screen } = this.props\r\n\r\n        let bg,\r\n            bgs = [img1, img2, img3, img4, img5, img6, img7]\r\n\r\n        bg = bgs[Math.floor(Math.random() * 7)]\r\n\r\n        return (\r\n            <>\r\n                {this.state.mobileNavState === '0px' && (\r\n                    <Mask onClick={this.switchNav} />\r\n                )}\r\n                <MobileNavHeader>\r\n                    <Logo>FoodRecipes</Logo>\r\n                    <IconButton onClick={this.switchNav}>\r\n                        <Menu />\r\n                    </IconButton>\r\n                </MobileNavHeader>\r\n                <NavContainer\r\n                    style={{\r\n                        backgroundImage: `url(${bg})`,\r\n                        left: this.state.mobileNavState\r\n                    }}\r\n                >\r\n                    <NavBgOverlay>\r\n                        <NavHeader>\r\n                            <Logo>FoodRecipes</Logo>\r\n                        </NavHeader>\r\n                        <Nav>\r\n                            <List>\r\n                                <Button\r\n                                    className={\r\n                                        screen === 'ingredients' ? 'active' : ''\r\n                                    }\r\n                                    onClick={() =>\r\n                                        this.props.switchScreen('ingredients')\r\n                                    }\r\n                                >\r\n                                    Ingredients\r\n                                </Button>\r\n                                <Button\r\n                                    className={\r\n                                        screen === 'recipes' ? 'active' : ''\r\n                                    }\r\n                                    onClick={() =>\r\n                                        this.props.switchScreen('recipes')\r\n                                    }\r\n                                >\r\n                                    Recipes\r\n                                </Button>\r\n                                <Button\r\n                                    className={\r\n                                        screen === 'recommendations'\r\n                                            ? 'active'\r\n                                            : ''\r\n                                    }\r\n                                    onClick={() =>\r\n                                        this.props.switchScreen(\r\n                                            'recommendations'\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Get recommendation\r\n                                </Button>\r\n                            </List>\r\n                        </Nav>\r\n                    </NavBgOverlay>\r\n                </NavContainer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\IngredientsScreen.js",["124"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Ingredient from './Components/Ingredient'\r\nimport TableHeader from './Components/TableHeader'\r\nimport { Button } from '@material-ui/core'\r\nimport Modal from '../../../Helpers/Modal/Modal'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport { Container, Header, HeaderContent } from '../CommonStyledComponents'\r\nimport AddIngredientForm from './Components/AddIngredientForm'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    getIngredients,\r\n    deleteIngredient,\r\n    updateIngredient\r\n} from './Controllers/IngredientsActions'\r\n\r\nconst IngredientsList = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    max-height: 100%;\r\n    overflow: auto;\r\n    /* width */\r\n    &::-webkit-scrollbar {\r\n        width: 6px;\r\n    }\r\n\r\n    /* Track */\r\n    &::-webkit-scrollbar-track {\r\n        background: transparent;\r\n    }\r\n\r\n    /* Handle */\r\n    &::-webkit-scrollbar-thumb {\r\n        background: rgba(0, 0, 0, 0.3);\r\n        border-radius: 8px;\r\n    }\r\n\r\n    /* Handle on hover */\r\n    &::-webkit-scrollbar-thumb:hover {\r\n        background: rgba(0, 0, 0, 0.5);\r\n    }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: white;\r\n    border-radius: 8px;\r\n    -webkit-box-shadow: 2px 2px 30px 0px rgba(0, 0, 0, 0.1);\r\n    -moz-box-shadow: 2px 2px 30px 0px rgba(0, 0, 0, 0.1);\r\n    box-shadow: 2px 2px 30px 0px rgba(0, 0, 0, 0.1);\r\n    height: 80%;\r\n\r\n    @media only screen and (max-width: 600px) {\r\n        width: 100%;\r\n        height: auto;\r\n        margin-top: 6%;\r\n    }\r\n`\r\n\r\nclass IngredientsScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            openModal: false,\r\n            preloaded: false\r\n        }\r\n    }\r\n\r\n    close = () => {\r\n        this.setState({\r\n            openModal: false,\r\n            preloaded: false\r\n        })\r\n    }\r\n\r\n    open = () => {\r\n        this.setState({\r\n            openModal: true\r\n        })\r\n    }\r\n\r\n    openIngredient = (data) => {\r\n        this.setState(\r\n            {\r\n                preloaded: true,\r\n                data: data\r\n            },\r\n            () => {\r\n                this.setState({\r\n                    openModal: true\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    deleteIngredient = (id) => {\r\n        this.props.deleteIngredient(id, this.props.getIngredients)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getIngredients()\r\n    }\r\n\r\n    render() {\r\n        const { ingredients } = this.props\r\n        return (\r\n            <>\r\n                <Container>\r\n                    <Header>\r\n                        <HeaderContent>\r\n                            <h3>Ingredients</h3>\r\n                            <p>\r\n                                View, add, edit and remove ingredients of all\r\n                                kinds.\r\n                            </p>\r\n                        </HeaderContent>\r\n                        <Button endIcon={<AddCircleIcon />} onClick={this.open}>\r\n                            New Ingredient\r\n                        </Button>\r\n                    </Header>\r\n                    <TableContainer>\r\n                        <TableHeader />\r\n                        <IngredientsList>\r\n                            {ingredients.map((ingredient) => {\r\n                                return (\r\n                                    <Ingredient\r\n                                        data={ingredient}\r\n                                        deleteIngredient={this.deleteIngredient}\r\n                                        editIngredient={this.openIngredient}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </IngredientsList>\r\n                    </TableContainer>\r\n                </Container>\r\n                <Modal close={this.close} open={this.state.openModal}>\r\n                    <AddIngredientForm\r\n                        close={this.close}\r\n                        preloaded={this.state.preloaded}\r\n                        data={this.state.data}\r\n                    />\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        ingredients: state.ingredients,\r\n        token: state.token\r\n    }),\r\n    { getIngredients, deleteIngredient }\r\n)(IngredientsScreen)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\RecipesScreen.js",["125","126"],"import React from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport { Container, Header, HeaderContent } from '../CommonStyledComponents'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport Recipe from './Components/Recipe'\r\nimport Modal from '../../../Helpers/Modal/Modal'\r\nimport AddRecipeForm from './Components/AddRecipeForm'\r\nimport { getRecipes } from './Controllers/RecipeActions'\r\nimport { FormatListNumberedRtlRounded, ThreeSixty } from '@material-ui/icons'\r\n\r\nconst RecipesListing = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    max-height: 80%;\r\n    width: 100%;\r\n    overflow: auto;\r\n    align-self: flex-end;\r\n    /* width */\r\n    &::-webkit-scrollbar {\r\n        width: 6px;\r\n    }\r\n\r\n    /* Track */\r\n    &::-webkit-scrollbar-track {\r\n        background: transparent;\r\n    }\r\n\r\n    /* Handle */\r\n    &::-webkit-scrollbar-thumb {\r\n        background: rgba(0, 0, 0, 0.3);\r\n        border-radius: 8px;\r\n    }\r\n\r\n    /* Handle on hover */\r\n    &::-webkit-scrollbar-thumb:hover {\r\n        background: rgba(0, 0, 0, 0.5);\r\n    }\r\n`\r\n\r\nclass RecipesScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            openModal: false,\r\n            recipeData: {},\r\n            preloaded: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getRecipes()\r\n    }\r\n\r\n    close = () => {\r\n        this.setState({\r\n            preloaded: false,\r\n            openModal: false\r\n        })\r\n    }\r\n\r\n    open = () => {\r\n        this.setState({\r\n            openModal: true\r\n        })\r\n    }\r\n\r\n    viewRecipe = (data) => {\r\n        this.setState(\r\n            {\r\n                preloaded: true,\r\n                recipeData: data\r\n            },\r\n            () => {\r\n                this.setState({\r\n                    openModal: true\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const recipes = this.props.recipes\r\n        return (\r\n            <>\r\n                <Container>\r\n                    <Header>\r\n                        <HeaderContent>\r\n                            <h3>Recipes</h3>\r\n                            <p>\r\n                                View, add, edit and remove recipes of all kinds.\r\n                            </p>\r\n                        </HeaderContent>\r\n                        <Button endIcon={<AddCircleIcon />} onClick={this.open}>\r\n                            New Recipe\r\n                        </Button>\r\n                    </Header>\r\n                    <RecipesListing>\r\n                        {recipes.map((recipe) => {\r\n                            return (\r\n                                <Recipe\r\n                                    handleClick={() => {\r\n                                        this.viewRecipe(recipe)\r\n                                    }}\r\n                                    data={recipe}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </RecipesListing>\r\n                </Container>\r\n                <Modal close={this.close} open={this.state.openModal}>\r\n                    <AddRecipeForm\r\n                        close={this.close}\r\n                        preloaded={this.state.preloaded}\r\n                        data={this.state.recipeData}\r\n                    />\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        recipes: state.recipes\r\n    }),\r\n    { getRecipes }\r\n)(RecipesScreen)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Header\\Header.js",["127","128","129","130","131"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { constants as c } from '../Constants'\r\n\r\nconst Nav = styled.nav`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    position: fixed;\r\n    width: 100%;\r\n    left: 0;\r\n    height: ${c.navHeight}px;\r\n    top: 0;\r\n    z-index: 2;\r\n`\r\n\r\nconst List = styled.ul`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\n\r\nconst Element = styled.li`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    a {\r\n        text-decoration: none;\r\n        font-weight: 500;\r\n        height: 100%;\r\n        letter-spacing: 1px;\r\n        margin: 0 10px;\r\n        color: white;\r\n        position: relative;\r\n        opacity: 0.8;\r\n        font-family: 'Source Sans Pro', sans-serif;\r\n        transition: opacity 0.3s ease-in-out;\r\n\r\n        &::after {\r\n            content: '';\r\n            height: 2px;\r\n            background: white;\r\n            display: block;\r\n            width: 0;\r\n            position: absolute;\r\n            left: 0;\r\n            top: 120%;\r\n            transition: width 0.4s ease-in-out;\r\n        }\r\n\r\n        &:hover {\r\n            opacity: 1;\r\n            transition: opacity 0.3s ease-in-out;\r\n\r\n            &::after {\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Logo = styled.h1`\r\n    font-family: 'Libre Baskerville', serif;\r\n    font-style: italic;\r\n    color: white;\r\n    letter-spacing: 2px;\r\n    opacity: 0.8;\r\n    cursor: pointer;\r\n    transition: opacity 0.3s ease-in-out;\r\n\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n`\r\n\r\nconst NavInner = styled.div`\r\n    width: 90%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n`\r\n\r\nexport default function Header(props) {\r\n    return (\r\n        <Nav>\r\n            <NavInner>\r\n                <Logo>FoodRecipes</Logo>\r\n                <List>\r\n                    <Element>\r\n                        <a\r\n                            href=\"javascript:void(0)\"\r\n                            onClick={() => {\r\n                                props.openModal('login')\r\n                            }}\r\n                        >\r\n                            Login\r\n                        </a>\r\n                    </Element>\r\n                    <Element>\r\n                        <a\r\n                            href=\"javascript:void(0)\"\r\n                            onClick={() => {\r\n                                props.openModal('register')\r\n                            }}\r\n                        >\r\n                            Register\r\n                        </a>\r\n                    </Element>\r\n                </List>\r\n            </NavInner>\r\n        </Nav>\r\n    )\r\n}\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\CommonStyledComponents.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\Ingredient.js",["132","133"],"import styled from 'styled-components'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline'\r\nimport { IconButton } from '@material-ui/core'\r\n\r\nconst Row = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    position: relative;\r\n\r\n    & > button {\r\n        height: 45px !important;\r\n        width: 45px !important;\r\n        align-self: center;\r\n\r\n        &.delete-btn {\r\n            .delete-full {\r\n                display: none;\r\n                color: #ff5353;\r\n            }\r\n\r\n            &:hover {\r\n                .delete {\r\n                    display: none;\r\n                }\r\n                .delete-full {\r\n                    display: block;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &::after {\r\n        content: '';\r\n        height: 100%;\r\n        max-height: 1px;\r\n        background: #efeff7;\r\n        display: block;\r\n        position: absolute;\r\n        bottom: 0;\r\n        width: 96%;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n    }\r\n`\r\n\r\nconst Cell = styled.div`\r\n    display: flex;\r\n    justify-content: start;\r\n    align-items: center;\r\n    text-align: left;\r\n    padding: 1.5% 2%;\r\n\r\n    &.ingredient-name {\r\n        width: 40%;\r\n        font-weight: 500;\r\n    }\r\n\r\n    &.ingredient-qty,\r\n    &.ingredient-unit,\r\n    &.ingredient-price {\r\n        width: 45%;\r\n        justify-content: center;\r\n    }\r\n`\r\n\r\nexport default function Ingredient(props) {\r\n    const { name, qty, unit, price, id } = props.data\r\n    return (\r\n        <Row>\r\n            <Cell className=\"ingredient-name\">{name}</Cell>\r\n            <Cell className=\"ingredient-qty\">{qty}</Cell>\r\n            <IconButton\r\n                aria-label=\"edit\"\r\n                className=\"edit-btn\"\r\n                onClick={() => {\r\n                    props.editIngredient(props.data)\r\n                }}\r\n            >\r\n                <EditIcon />\r\n            </IconButton>\r\n            <IconButton\r\n                aria-label=\"delete\"\r\n                className=\"delete-btn\"\r\n                onClick={() => {\r\n                    props.deleteIngredient(id)\r\n                }}\r\n            >\r\n                <DeleteIcon className=\"delete-full\" />\r\n                <DeleteOutlineIcon className=\"delete\" />\r\n            </IconButton>\r\n        </Row>\r\n    )\r\n}\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\TableHeader.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\Recipe.js",["134","135","136"],"import styled from 'styled-components'\r\nimport TimerIcon from '@material-ui/icons/Timer'\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer'\r\n\r\nconst Box = styled.div`\r\n    border-radius: 8px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 31.3%;\r\n    margin: 1%;\r\n    background: white;\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n\r\n    @media only screen and (max-width: 600px) {\r\n        width: 95%;\r\n        margin: 3% auto 3% auto;\r\n    }\r\n`\r\n\r\nconst BoxHeader = styled.div`\r\n    background: rgb(55, 59, 96);\r\n    padding: 3% 4%;\r\n\r\n    p {\r\n        color: white;\r\n        font-size: 90%;\r\n        font-weight: 500;\r\n        text-align: left;\r\n        margin: 0;\r\n    }\r\n`\r\n\r\nconst BoxContent = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    padding: 8% 5%;\r\n`\r\n\r\nconst InfoSection = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    svg {\r\n        font-size: 200%;\r\n        color: rgba(55, 59, 96, 0.8);\r\n    }\r\n\r\n    .label {\r\n        font-weight: 700;\r\n        font-size: 70%;\r\n        margin-top: 5px;\r\n        color: rgba(0, 0, 0, 0.5);\r\n    }\r\n\r\n    .info {\r\n        font-size: 120%;\r\n        font-weight: 600;\r\n        margin: 0 auto;\r\n    }\r\n`\r\n\r\nexport default function Recipe(props) {\r\n    const { name, time, difficulty, price } = props.data\r\n    const { handleClick } = props\r\n\r\n    return (\r\n        <Box onClick={props.handleClick} style={props.scoring ? {\r\n            width: \"100%\"\r\n        } : {}}>\r\n            <BoxHeader>\r\n                <p>{name}</p>\r\n            </BoxHeader>\r\n            <BoxContent style={props.highlight == true ? {\r\n                background: \"#7D83B5\"\r\n            } : {}}>\r\n                <InfoSection>\r\n                    <TimerIcon />\r\n                    <p className=\"label\">TIME TO COOK</p>\r\n                    <p className=\"info\">{time}</p>\r\n                </InfoSection>\r\n                <InfoSection>\r\n                    <LocalOfferIcon />\r\n                    <p className=\"label\">APPROX. COST</p>\r\n                    <p className=\"info\">{price} lei</p>\r\n                </InfoSection>\r\n            </BoxContent>\r\n        </Box>\r\n    )\r\n}\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Components\\AddIngredientForm.js",["137","138","139","140","141"],"import React from 'react'\r\nimport {\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    FormControl,\r\n    TextField,\r\n    Button\r\n} from '@material-ui/core'\r\nimport {\r\n    addIngredient,\r\n    getIngredients,\r\n    updateIngredient\r\n} from '../Controllers/IngredientsActions'\r\nimport { connect } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nconst FormContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 300px;\r\n    min-width: 300px;\r\n    padding: 30px 20px;\r\n    background: white;\r\n    border-radius: 4px;\r\n`\r\n\r\nclass AddIngredientForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        if (props.preloaded) {\r\n            this.state = {\r\n                unitType: '',\r\n                id: props.data.id,\r\n                name: props.data.name,\r\n                qty: props.data.qty\r\n            }\r\n        } else\r\n            this.state = {\r\n                unitType: '',\r\n                name: '',\r\n                qty: 0\r\n            }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            unitType: event.target.value\r\n        })\r\n    }\r\n\r\n    updateValue = (type, content) => {\r\n        switch (type) {\r\n            case 'name':\r\n                this.setState({\r\n                    name: content\r\n                })\r\n                break\r\n            case 'qty':\r\n                this.setState({\r\n                    qty: content\r\n                })\r\n        }\r\n    }\r\n\r\n    clearForm = () => {\r\n        this.setState({\r\n            name: '',\r\n            qty: ''\r\n        })\r\n        this.props.getIngredients()\r\n        this.props.close()\r\n    }\r\n\r\n    sendIngredient = () => {\r\n        this.props.addIngredient(\r\n            {\r\n                name: this.state.name,\r\n                qty: this.state.qty\r\n            },\r\n            this.clearForm\r\n        )\r\n    }\r\n\r\n    saveIngredient = () => {\r\n        this.props.updateIngredient(\r\n            this.state.id,\r\n            {\r\n                id: this.state.id,\r\n                name: this.state.name,\r\n                qty: this.state.qty\r\n            },\r\n            this.clearForm\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <FormContainer>\r\n                <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Name\"\r\n                    variant=\"outlined\"\r\n                    value={this.state.name}\r\n                    onChange={(e) => {\r\n                        this.updateValue('name', e.target.value)\r\n                    }}\r\n                />\r\n                <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Quantity\"\r\n                    variant=\"outlined\"\r\n                    value={this.state.qty}\r\n                    onChange={(e) => {\r\n                        this.updateValue('qty', e.target.value)\r\n                    }}\r\n                />\r\n                {!this.props.preloaded && (\r\n                    <Button variant=\"outlined\" onClick={this.sendIngredient}>\r\n                        Add Ingredient\r\n                    </Button>\r\n                )}\r\n                {this.props.preloaded && (\r\n                    <Button variant=\"outlined\" onClick={this.saveIngredient}>\r\n                        Save\r\n                    </Button>\r\n                )}\r\n            </FormContainer>\r\n        )\r\n    }\r\n}\r\nexport default connect((state) => ({ ...state }), {\r\n    addIngredient,\r\n    getIngredients,\r\n    updateIngredient\r\n})(AddIngredientForm)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Helpers\\Modal\\Modal.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Reducer.js",["142","143"],"import { CallToActionRounded } from '@material-ui/icons'\r\nimport { getIngredients } from './Screens/Dashboard/Ingredients/Controllers/IngredientsActions'\r\n\r\nconst INITIAL_STATE = {\r\n    loggedIn: false,\r\n    ingredients: [],\r\n    recipes: [],\r\n    username: ''\r\n}\r\n\r\nconst Reducer = function (state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n        case 'GET_INGREDIENTS':\r\n            return { ...state, ingredients: action.ingredients }\r\n        case 'GET_RECIPES':\r\n            return { ...state, recipes: action.payload }\r\n        case 'LOGGED_IN':\r\n            localStorage.setItem('token', action.token)\r\n            return {\r\n                ...state,\r\n                loggedIn: true,\r\n                jwt: action.token,\r\n                ingredients: [],\r\n                recipes: []\r\n            }\r\n        case 'IS_LOGGED':\r\n            return {\r\n                ...state,\r\n                loggedIn: true,\r\n                jwt: action.token,\r\n                ingredients: [],\r\n                recipes: []\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default Reducer\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Ingredients\\Controllers\\IngredientsActions.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Auth\\Controllers\\AuthActions.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\PickMeal.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\PickRecipes.js",["144"],"import React from 'react'\r\nimport Recipe from '../../Recipes/Components/Recipe'\r\nimport {connect} from 'react-redux'\r\nimport styled from \"styled-components\";\r\n\r\nconst RecipesListing = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  max-height: 80%;\r\n  width: 100%;\r\n  overflow: auto;\r\n  align-self: flex-end;\r\n  /* width */\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n\r\n  /* Track */\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background: transparent;\r\n  }\r\n\r\n  /* Handle */\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background: rgba(0, 0, 0, 0.3);\r\n    border-radius: 8px;\r\n  }\r\n\r\n  /* Handle on hover */\r\n\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: rgba(0, 0, 0, 0.5);\r\n  }\r\n`\r\n\r\nclass PickRecipes extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            choices: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const c = [];\r\n\r\n        this.props.recipes.map(recipe => {\r\n            recipe.selected = false;\r\n            if (recipe.tipPreparat.toLowerCase() === this.props.type.toLowerCase()) c.push(recipe)\r\n        })\r\n\r\n        this.setState({\r\n            choices: c\r\n        });\r\n    }\r\n\r\n    select = (recipe) => {\r\n        const c = this.state.choices;\r\n\r\n        const n = c.filter(recipe => recipe.selected).length\r\n\r\n        if (n < 3 || (n >= 3 && c[c.indexOf(recipe)].selected === true)) {\r\n            c[c.indexOf(recipe)].selected = !c[c.indexOf(recipe)].selected;\r\n\r\n            this.setState({\r\n                choices: c\r\n            }, () => {\r\n                this.props.setSelection(this.state.choices.filter(recipe => recipe.selected))\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <RecipesListing>\r\n                {this.state.choices.map(recipe => {\r\n                    return <Recipe highlight={recipe.selected} handleClick={() => {\r\n                        this.select(recipe)\r\n                    }} data={recipe}/>\r\n                })}\r\n            </RecipesListing>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        recipes: state.recipes\r\n    }),\r\n    {}\r\n)(PickRecipes)\r\n","C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Components\\AddRecipeForm.js",["145","146"],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recipes\\Controllers\\RecipeActions.js",[],"C:\\main\\Projects\\FoodRecipes\\frontend\\src\\Screens\\Dashboard\\Recommendations\\Components\\ScoreRecipes.js",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":2,"column":50,"nodeType":"153","messageId":"154","endLine":2,"endColumn":54},{"ruleId":"151","severity":1,"message":"155","line":4,"column":17,"nodeType":"153","messageId":"154","endLine":4,"endColumn":25},{"ruleId":"156","severity":1,"message":"157","line":11,"column":8,"nodeType":"158","endLine":11,"endColumn":10,"suggestions":"159"},{"ruleId":"151","severity":1,"message":"160","line":5,"column":10,"nodeType":"153","messageId":"154","endLine":5,"endColumn":20},{"ruleId":"161","severity":1,"message":"162","line":155,"column":9,"nodeType":"163","messageId":"164","endLine":175,"endColumn":10},{"ruleId":"165","severity":1,"message":"166","line":171,"column":13,"nodeType":"167","messageId":"168","endLine":174,"endColumn":19},{"ruleId":"151","severity":1,"message":"169","line":130,"column":7,"nodeType":"153","messageId":"154","endLine":130,"endColumn":14},{"ruleId":"151","severity":1,"message":"170","line":14,"column":5,"nodeType":"153","messageId":"154","endLine":14,"endColumn":21},{"ruleId":"151","severity":1,"message":"171","line":11,"column":10,"nodeType":"153","messageId":"154","endLine":11,"endColumn":38},{"ruleId":"151","severity":1,"message":"172","line":11,"column":40,"nodeType":"153","messageId":"154","endLine":11,"endColumn":50},{"ruleId":"151","severity":1,"message":"152","line":3,"column":10,"nodeType":"153","messageId":"154","endLine":3,"endColumn":14},{"ruleId":"173","severity":1,"message":"174","line":93,"column":25,"nodeType":"175","endLine":98,"endColumn":26},{"ruleId":"176","severity":1,"message":"177","line":94,"column":34,"nodeType":"178","messageId":"179","endLine":94,"endColumn":54},{"ruleId":"173","severity":1,"message":"174","line":103,"column":25,"nodeType":"175","endLine":108,"endColumn":26},{"ruleId":"176","severity":1,"message":"177","line":104,"column":34,"nodeType":"178","messageId":"179","endLine":104,"endColumn":54},{"ruleId":"151","severity":1,"message":"180","line":70,"column":24,"nodeType":"153","messageId":"154","endLine":70,"endColumn":28},{"ruleId":"151","severity":1,"message":"181","line":70,"column":30,"nodeType":"153","messageId":"154","endLine":70,"endColumn":35},{"ruleId":"151","severity":1,"message":"182","line":65,"column":25,"nodeType":"153","messageId":"154","endLine":65,"endColumn":35},{"ruleId":"151","severity":1,"message":"183","line":66,"column":13,"nodeType":"153","messageId":"154","endLine":66,"endColumn":24},{"ruleId":"184","severity":1,"message":"185","line":75,"column":48,"nodeType":"186","messageId":"187","endLine":75,"endColumn":50},{"ruleId":"151","severity":1,"message":"188","line":3,"column":5,"nodeType":"153","messageId":"154","endLine":3,"endColumn":15},{"ruleId":"151","severity":1,"message":"189","line":4,"column":5,"nodeType":"153","messageId":"154","endLine":4,"endColumn":11},{"ruleId":"151","severity":1,"message":"190","line":5,"column":5,"nodeType":"153","messageId":"154","endLine":5,"endColumn":13},{"ruleId":"151","severity":1,"message":"191","line":6,"column":5,"nodeType":"153","messageId":"154","endLine":6,"endColumn":16},{"ruleId":"161","severity":1,"message":"162","line":53,"column":9,"nodeType":"163","messageId":"164","endLine":63,"endColumn":10},{"ruleId":"151","severity":1,"message":"192","line":1,"column":10,"nodeType":"153","messageId":"154","endLine":1,"endColumn":29},{"ruleId":"151","severity":1,"message":"193","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":24},{"ruleId":"194","severity":1,"message":"195","line":52,"column":39,"nodeType":"196","messageId":"197","endLine":52,"endColumn":41},{"ruleId":"194","severity":1,"message":"195","line":71,"column":42,"nodeType":"196","messageId":"197","endLine":71,"endColumn":44},{"ruleId":"161","severity":1,"message":"162","line":100,"column":9,"nodeType":"163","messageId":"164","endLine":120,"endColumn":10},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["200"],"'checkLogin' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'MenuBtn' is assigned a value but never used.","'updateIngredient' is defined but never used.","'FormatListNumberedRtlRounded' is defined but never used.","'ThreeSixty' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'unit' is assigned a value but never used.","'price' is assigned a value but never used.","'difficulty' is assigned a value but never used.","'handleClick' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'CallToActionRounded' is defined but never used.","'getIngredients' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},"Update the dependencies array to be: [props]",{"range":"203","text":"204"},[408,410],"[props]"]